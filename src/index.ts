import TelegramBot from 'node-telegram-bot-api';
import dotenv from 'dotenv';
import { menu, MenuItem, MessageContent } from './menu';

// Load environment variables
dotenv.config();

// Get bot token from environment variables
const token = process.env.TELEGRAM_BOT_TOKEN;

if (!token) {
  console.error('TELEGRAM_BOT_TOKEN is not defined in .env file');
  process.exit(1);
}

// Create a new bot instance
const bot = new TelegramBot(token, { polling: true });

// Store user's current menu state
const userMenuState: Record<number, string[]> = {};

// Function to generate keyboard markup from menu items
function generateKeyboard(items: MenuItem[]): TelegramBot.KeyboardButton[][] {
  return [
    ...items.map(item => [{ text: item.title }])
  ];
}

// Function to find a menu item by its title
function findMenuItem(path: string[]): MenuItem | null {
  if (path.length === 0) return null;

  let currentMenu = menu;
  let currentItem: MenuItem | null = null;

  for (const title of path) {
    currentItem = currentMenu.find(item => item.title === title) || null;
    if (!currentItem || !currentItem.subMenu) break;
    currentMenu = currentItem.subMenu;
  }

  return currentItem;
}

// Function to get the current menu based on user's state
function getCurrentMenu(userId: number): MenuItem[] {
  const path = userMenuState[userId] || [];

  if (path.length === 0) return menu;

  let currentMenu = menu;

  for (let i = 0; i < path.length - 1; i++) {
    const title = path[i];
    const item = currentMenu.find(item => item.title === title);
    if (!item || !item.subMenu) return menu;
    currentMenu = item.subMenu;
  }

  return currentMenu;
}

// Function to send a message based on its content type
async function sendMessage(chatId: number, content: string | MessageContent): Promise<void> {
  if (typeof content === 'string') {
    await bot.sendMessage(chatId, content);
    return;
  }

  // Handle complex message content - prioritize content types
  if (content.photo) {
    try {
      // If photo is present, send it first without any caption
      await bot.sendPhoto(chatId, content.photo);

      // Then send the text as a separate message
      if (content.text) {
        await bot.sendMessage(chatId, content.text);
      }

      // If there's also a link, send it as a separate message
      if (content.link) {
        const linkMessage = `[${content.link.text}](${content.link.url})`;
        await bot.sendMessage(chatId, linkMessage, { parse_mode: 'Markdown' });
      }
    } catch (error) {
      console.error('Error sending photo:', error);
      // Fallback to sending just the text and link
      if (content.text) {
        await bot.sendMessage(chatId, content.text);
      }
      if (content.link) {
        const linkMessage = `[${content.link.text}](${content.link.url})`;
        await bot.sendMessage(chatId, linkMessage, { parse_mode: 'Markdown' });
      }
    }
  } else if (content.link) {
    // If link is present (and no photo), format with Markdown
    const text = content.text ? `${content.text}\n\n` : '';
    const message = `${text}[${content.link.text}](${content.link.url})`;
    await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
  } else if (content.location) {
    // If location is present (and no photo or link)
    await bot.sendLocation(chatId, content.location.latitude, content.location.longitude);
    if (content.text) {
      await bot.sendMessage(chatId, content.text);
    }
  } else if (content.text) {
    // If only text is present
    await bot.sendMessage(chatId, content.text);
  }
}

// Store users who have received the welcome message
const welcomedUsers = new Set<number>();

// Send welcome message when user first interacts with the bot
bot.on('message', async (msg) => {
  // Skip if it's a /start command (handled separately)
  if (msg.text && msg.text.startsWith('/start')) return;

  const chatId = msg.chat.id;
  const userId = msg.from?.id;

  if (!userId) return;

  // If user hasn't been welcomed yet
  if (!welcomedUsers.has(userId)) {
    welcomedUsers.add(userId);

    // Send welcome image and text
    await bot.sendPhoto(chatId, 'https://disk.yandex.ru/i/YgqwFEEff79cbA');
    await bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å –≤ –±–æ—Ç–µ —Å–∏–Ω–µ—Ä–≥–∏–∏ –æ—Ç—Ä–∞—Å–ª–µ–≤—ã—Ö –≤—ã—Å—Ç–∞–≤–æ–∫ EXPO!\n\n–ó–¥–µ—Å—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã —Å–æ–±—Ä–∞–ª–∏ –≤—Å—é —Å–∞–º—É—é –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã—Å—Ç–∞–≤–∫–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–π–¥—É—Ç 27‚Äì30 –º–∞—è 2025 –≤ –ú–æ—Å–∫–≤–µ, –ú–í–¶ ¬´–ö—Ä–æ–∫—É—Å –≠–∫—Å–ø–æ¬ª.');

    // Prompt to use /start command
    await bot.sendMessage(chatId, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º');
  }
});

// Handle /start command
bot.onText(/\/start/, async (msg: TelegramBot.Message) => {
  const chatId = msg.chat.id;
  const userId = msg.from?.id;

  if (!userId) return;

  // Reset user's menu state
  userMenuState[userId] = [];

  // Send EXPO description
  await bot.sendMessage(chatId, 'EXPO ‚Äì —ç—Ç–æ —Å–∞–º–æ–µ –∫—Ä—É–ø–Ω–æ–µ –æ—Ç—Ä–∞—Å–ª–µ–≤–æ–µ –≤—ã—Å—Ç–∞–≤–æ—á–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ –†–æ—Å—Å–∏–∏ –∏ –í–æ—Å—Ç–æ—á–Ω–æ–π –ï–≤—Ä–æ–ø–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –ª—é–¥–µ–π, –∏–¥–µ–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö, –Ω–æ —Å–º–µ–∂–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π, —Å–æ–∑–¥–∞–≤–∞—è —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Ä–µ–¥—É –¥–ª—è –æ–±–º–µ–Ω–∞ –∑–Ω–∞–Ω–∏—è–º–∏ –∏ –æ–ø—ã—Ç–æ–º.\n\n–°–∏–Ω–µ—Ä–≥–∏—è 4 –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–≤—ã—Ö B2B –≤—ã—Å—Ç–∞–≤–æ–∫ –ø–æ–¥ –µ–¥–∏–Ω—ã–º –±—Ä–µ–Ω–¥–æ–º —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –±–µ—Å–ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç–Ω—ã–π –ø–æ—Ç–æ–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –±–æ–ª—å—à–µ –Ω–∏–≥–¥–µ.\n\n@cttexpo\n–ö–∏—Ä–ø–∏—á–∏ –∫–∞–∫ —Å–∏–º–≤–æ–ª —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞, –≥–ª–∞–≤–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º –∫–æ—Ç–æ—Ä–æ–≥–æ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞. –í —ç—Ç–æ–º –≥–æ–¥—É –≤—ã—Å—Ç–∞–≤–∫–∞ –æ—Ç–º–µ—Ç–∏—Ç 25-–ª–µ—Ç–Ω–∏–π —é–±–∏–ª–µ–π –≤–º–µ—Å—Ç–µ —Å 80 000+ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞–º–∏ —Å–≤–æ–µ–≥–æ –¥–µ–ª–∞.\n\n@comvex\n–ü–µ—Ä–µ–∫—Ä—ë—Å—Ç–æ–∫ –∫–∞–∫ —Å–∏–º–≤–æ–ª –¥–≤–∏–∂–µ–Ω–∏—è –∏ —Ä–∞–∑–≤–∏—Ç–∏—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ —Ä—ã–Ω–∫–∞ –∏ —Å–æ–∑–¥–∞—ë—Ç —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–æ—Ä—ã–≤–Ω—ã—Ö –±–∏–∑–Ω–µ—Å-—Ä–µ—à–µ–Ω–∏–π.\n\n@ctoexpo\n–ù–µ–∑–∞–º–µ–Ω–∏–º—ã–π –∫–ª—é—á –¥–ª—è —Å–ª–∞–∂–µ–Ω–Ω–æ–π –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ—Å–ª–µ–ø—Ä–æ–¥–∞–∂–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∏ —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: —Å –µ–≥–æ –ø–æ–º–æ—â—å—é –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã —Å –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞–º–∏ –∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞–º–∏.\n\n@logistikaexpo\n–¢–æ—á–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–µ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ—Ç–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã –¥–≤–∏–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ø–µ—à–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤.\n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ: [sigma-expo.ru/expo](https://sigma-expo.ru/expo)', {
    parse_mode: 'Markdown'
  });

  // Send main menu
  await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç üëá', {
    reply_markup: {
      keyboard: generateKeyboard(menu),
      resize_keyboard: true
    }
  });
});

// Handle all messages
bot.on('message', async (msg) => {
  if (!msg.text || msg.text.startsWith('/')) return;

  const chatId = msg.chat.id;
  const userId = msg.from?.id;

  if (!userId) return;

  // Initialize user state if not exists
  if (!userMenuState[userId]) {
    userMenuState[userId] = [];
  }

  const currentMenu = getCurrentMenu(userId);
  const selectedItem = currentMenu.find(item => item.title === msg.text);

  if (!selectedItem) {
    // Unknown command
    bot.sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é:', {
      reply_markup: {
        keyboard: generateKeyboard(currentMenu),
        resize_keyboard: true
      }
    });
    return;
  }

  // Handle "back" action
  if (selectedItem.action === 'back') {
    if (userMenuState[userId].length > 0) {
      // If the title is "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reset to main menu
      if (selectedItem.title === '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') {
        userMenuState[userId] = [];
        bot.sendMessage(chatId, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', {
          reply_markup: {
            keyboard: generateKeyboard(menu),
            resize_keyboard: true
          }
        });
      } else {
        // Otherwise just go back one level
        userMenuState[userId].pop();
        const newMenu = getCurrentMenu(userId);
        bot.sendMessage(chatId, '–ù–∞–∑–∞–¥...', {
          reply_markup: {
            keyboard: generateKeyboard(newMenu),
            resize_keyboard: true
          }
        });
      }
    }
    return;
  }

  // Handle submenu
  if (selectedItem.subMenu) {
    userMenuState[userId].push(selectedItem.title);

    // Customize message based on menu type
    let message = '';
    if (selectedItem.title === '–í—ã—Å—Ç–∞–≤–∫–∏') {
      message = '–í—ã–±–µ—Ä–∏ –≤—ã—Å—Ç–∞–≤–∫—É, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç üëá';
    } else {
      message = `${selectedItem.title}:`;
    }

    bot.sendMessage(chatId, message, {
      reply_markup: {
        keyboard: generateKeyboard(selectedItem.subMenu),
        resize_keyboard: true
      }
    });
    return;
  }

  // Handle message content
  if (selectedItem.message) {
    await sendMessage(chatId, selectedItem.message);
  }
});

console.log('Bot started successfully! ü§ñ');
