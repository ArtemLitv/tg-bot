// Схема данных Prisma для проекта Telegram-бота

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Модель для хранения информации о пользователях
model User {
  id                Int           @id @default(autoincrement())
  telegramId        Int           @unique
  username          String?
  firstName         String?
  lastName          String?
  languageCode      String?
  currentNodeId     String
  lastActivityAt    DateTime      @default(now())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  // Связи с другими моделями
  nodeHistory       NodeHistory[]
  userInputs        UserInput[]
}

// Модель для хранения истории переходов пользователя по узлам
model NodeHistory {
  id                Int           @id @default(autoincrement())
  userId            Int
  nodeId            String
  timestamp         DateTime      @default(now())
  
  // Связь с пользователем
  user              User          @relation(fields: [userId], references: [id])
}

// Модель для хранения вводимых пользователем данных
model UserInput {
  id                Int           @id @default(autoincrement())
  userId            Int
  nodeId            String
  inputType         String        // Тип ввода (text, location, etc.)
  inputValue        String        // Значение ввода в формате JSON
  timestamp         DateTime      @default(now())
  
  // Связь с пользователем
  user              User          @relation(fields: [userId], references: [id])
}

// Модель для хранения логов
model Log {
  id                Int           @id @default(autoincrement())
  level             String        // Уровень лога (info, error, warn, debug)
  message           String
  meta              String?       // Дополнительные данные в формате JSON
  timestamp         DateTime      @default(now())
}

// Модель для хранения учетных данных администраторов
model Admin {
  id                Int           @id @default(autoincrement())
  username          String        @unique
  password          String        // Хэшированный пароль
  email             String?       @unique
  googleId          String?       @unique // Для авторизации через Google OAuth
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

// Модель для хранения конфигурации бота
model BotConfig {
  id                Int           @id @default(autoincrement())
  config            String        // Конфигурация в формате JSON
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  isActive          Boolean       @default(false)
}